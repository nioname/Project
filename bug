<?php
/*
Plugin Name: WooCommerce Optimum Integration
Description: Integracija tarp WooCommerce ir Optimum buhalterinÄ—s apskaitos sistemos.
Version: 1.2
Author: sasda
*/

if (!defined('ABSPATH')) {
    exit; // Exit if accessed directly
}

if (!defined('WOOCOMMERCE_OPTIMUM_INTEGRATION_LOADED')) {
    define('WOOCOMMERCE_OPTIMUM_INTEGRATION_LOADED', true);

    // Add a function to log debug messages
    if (!function_exists('wp_debug_log')) {
        function wp_debug_log($message) {
            if (defined('WP_DEBUG_LOG') && WP_DEBUG_LOG) {
                error_log($message);
            }
        }
    }

    // Log that the plugin has been loaded
    if (defined('WP_DEBUG') && WP_DEBUG) {
        wp_debug_log('WooCommerce Optimum Integration plugin loaded.');
    }

    // Add a function to be executed after an order is marked as completed
    add_action('woocommerce_order_status_completed', 'send_invoice_to_optimum', 10, 1);

    function send_invoice_to_optimum($order_id) {
        if (defined('WP_DEBUG') && WP_DEBUG) {
            wp_debug_log('send_invoice_to_optimum function called with order ID: ' . $order_id);
        }

        if (!$order_id) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('No order ID provided.');
            }
            return;
        }

        if (!is_numeric($order_id)) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('Order ID is not numeric.');
            }
            return;
        }

        $order = wc_get_order($order_id);
        if (!$order) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('Failed to retrieve order with ID: ' . $order_id);
            }
            return;
        }

        $order_data = $order->get_data();

        // Helper function to sanitize and check null values
        function sanitize_xml_value_custom($value) {
            if ($value === null) {
                return '';
            }
            return htmlspecialchars((string)$value, ENT_XML1, 'UTF-8');
        }

        // Helper function to sanitize keys
        function sanitize_key_custom($key) {
            if ($key === null) {
                return '';
            }
            return preg_replace('/[^a-zA-Z0-9_\-]/', '_', (string)$key);
        }

        $invoice_data = array(
            'Date' => date('Y-m-d'),
            'No' => 'AUE-' . str_pad((string)$order_data['id'], 7, '0', STR_PAD_LEFT),
            'CstCompany' => array(
                'Name' => sanitize_xml_value_custom(($order_data['billing']['first_name'] ?? '') . ' ' . ($order_data['billing']['last_name'] ?? '') . ' (' . ($order_data['billing']['email'] ?? '') . ')'),
                'CstGrpFllCode' => 'LT',
                'Address' => sanitize_xml_value_custom($order_data['billing']['address_1'] ?? ''),
                'PstCode' => sanitize_xml_value_custom($order_data['billing']['postcode'] ?? ''),
                'CtName' => sanitize_xml_value_custom($order_data['billing']['city'] ?? ''),
                'CountryId' => sanitize_xml_value_custom($order_data['billing']['country'] ?? ''),
                'Mobile' => sanitize_xml_value_custom($order_data['billing']['phone'] ?? ''),
                'EMail' => sanitize_xml_value_custom($order_data['billing']['email'] ?? ''),
                'SbmCmpCode' => 'false'
            ),
            'RspEmpCode' => 'JPUN',
            'Articles' => array()
        );

        foreach ($order->get_items() as $item_id => $item) {
            $product = $item->get_product();
            $article_data = array(
                'ArtCode' => sanitize_xml_value_custom($product->get_sku() ? $product->get_sku() : (string)$product->get_id()),
                'StrFllCode' => 'S',
                'Quantity' => sanitize_xml_value_custom((string)$item->get_quantity()),
                'UntPrice' => sanitize_xml_value_custom((string)($item->get_total() / $item->get_quantity())),
                'Discount' => 0,
                'VatTariff' => 0.21,
                'ExtPrice' => sanitize_xml_value_custom((string)$item->get_total())
            );
            $invoice_data['Articles'][] = $article_data;
        }

        if (defined('WP_DEBUG') && WP_DEBUG) {
            wp_debug_log('Invoice data prepared: ' . print_r($invoice_data, true));
        }

        try {
            $dom = new DOMDocument('1.0', 'UTF-8');
            $dom->formatOutput = true;

            $envelope = $dom->createElementNS('http://schemas.xmlsoap.org/soap/envelope/', 'soap:Envelope');
            $header = $dom->createElement('soap:Header');
            $body = $dom->createElement('soap:Body');

            $dom->appendChild($envelope);
            $envelope->appendChild($header);
            $envelope->appendChild($body);

            $optimumHeader = $dom->createElementNS('http://api.optimum.lt/v1/lt/Trd/', 'Header');
            $key = $dom->createElement('Key', 'KMlz7zZzU80Ry5xs3OvjlnY4JLHHvTuMqqVdXuQ0hn3NXNk9Ov6adBePTIG20U4Y');
            $optimumHeader->appendChild($key);
            $header->appendChild($optimumHeader);

            $insertInvoice = $dom->createElementNS('http://api.optimum.lt/v1/lt/Trd/', 'InsertInvoice');
            $invoice = $dom->createElement('invoice');

            foreach ($invoice_data as $key => $value) {
                $key = sanitize_key_custom($key);
                if ($key === '') {
                    continue;
                }
                if (!empty($value)) {
                    if (is_array($value)) {
                        $sub_element = $dom->createElement($key);
                        foreach ($value as $sub_key => $sub_value) {
                            $sub_key = sanitize_key_custom($sub_key);
                            if ($sub_key === '') {
                                continue;
                            }
                            if (is_array($sub_value)) {
                                $sub_sub_element = $dom->createElement($sub_key);
                                foreach ($sub_value as $sub_sub_key => $sub_sub_value) {
                                    $sub_sub_key = sanitize_key_custom($sub_sub_key);
                                    if ($sub_sub_key === '') {
                                        continue;
                                    }
                                    $sub_sub_element->appendChild($dom->createElement($sub_sub_key, sanitize_xml_value_custom($sub_sub_value)));
                                }
                                $sub_element->appendChild($sub_sub_element);
                            } else {
                                $sub_element->appendChild($dom->createElement($sub_key, sanitize_xml_value_custom($sub_value)));
                            }
                        }
                        $invoice->appendChild($sub_element);
                    } else {
                        $invoice->appendChild($dom->createElement($key, sanitize_xml_value_custom($value)));
                    }
                }
            }

            $insertInvoice->appendChild($invoice);
            $body->appendChild($insertInvoice);

            $xml_request = $dom->saveXML();

            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('XML Request: ' . $xml_request);
            }
        } catch (Exception $e) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('Error creating XML: ' . $e->getMessage());
            }
            return array('status' => 'error', 'message' => 'Error creating XML: ' . $e->getMessage());
        }

        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://api.optimum.lt/v1/lt/Trd.asmx?op=InsertInvoice");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml_request);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            "Content-Type: text/xml; charset=utf-8",
            "SOAPAction: http://api.optimum.lt/v1/lt/Trd/InsertInvoice"
        ));

        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        $curl_error = curl_error($ch);
        curl_close($ch);

        if (defined('WP_DEBUG') && WP_DEBUG) {
            wp_debug_log('Response HTTP Code: ' . $http_code);
            wp_debug_log('Response: ' . $response);
        }

        if ($response === false || $http_code != 200) {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('Error sending invoice to Optimum. HTTP Code: ' . $http_code . '. Response: ' . $response . '. CURL Error: ' . $curl_error);
            }
            return array('status' => 'error', 'message' => 'Error sending invoice. HTTP Code: ' . $http_code . '. Response: ' . $response . '. CURL Error: ' . $curl_error);
        } else {
            if (defined('WP_DEBUG') && WP_DEBUG) {
                wp_debug_log('Response received, processing XML response.');
            }

            libxml_use_internal_errors(true);
            $response_xml = simplexml_load_string($response);
            if ($response_xml === false) {
                $errors = libxml_get_errors();
                foreach ($errors as $error) {
                    wp_debug_log('XML Error: ' . $error->message);
                }
                libxml_clear_errors();
                return array('status' => 'error', 'message' => 'Failed to parse XML response.');
            }

            $statusNodes = $response_xml->xpath('//InsertInvoiceResult/Status');
            $resultNodes = $response_xml->xpath('//InsertInvoiceResult/Result');
            $errorNodes = $response_xml->xpath('//InsertInvoiceResult/Error');

            $status = !empty($statusNodes) ? (string) $statusNodes[0] : '';
            $result = !empty($resultNodes) ? (string) $resultNodes[0] : '';
            $error = !empty($errorNodes) ? (string) $errorNodes[0] : '';

            if ($status == 'Success') {
                if (defined('WP_DEBUG') && WP_DEBUG) {
                    wp_debug_log('Invoice sent to Optimum successfully. Result: ' . $result);
                }
                return array('status' => 'success', 'message' => 'Invoice sent successfully. Result: ' . $result);
            } else {
                if (!empty($error)) {
                    if (defined('WP_DEBUG') && WP_DEBUG) {
                        wp_debug_log('Error sending invoice to Optimum. Error: ' . $error);
                    }
                    return array('status' => 'error', 'message' => 'Error: ' . $error);
                } else {
                    if (defined('WP_DEBUG') && WP_DEBUG) {
                        wp_debug_log('Error sending invoice to Optimum. Status: ' . $status . '. Result: ' . $result);
                    }
                    return array('status' => 'error', 'message' => 'Status: ' . $status . '. Result: ' . $result);
                }
            }
        }
    }

    // Schedule daily event for sending completed orders
    if (!wp_next_scheduled('daily_send_completed_orders_to_optimum')) {
        wp_schedule_event(time(), 'daily', 'daily_send_completed_orders_to_optimum');
    }

    add_action('daily_send_completed_orders_to_optimum', 'send_completed_orders_to_optimum');

    function send_completed_orders_to_optimum() {
        $args = array(
            'status' => 'completed',
            'limit' => -1,
        );

        $orders = wc_get_orders($args);

        foreach ($orders as $order) {
            send_invoice_to_optimum($order->get_id());
        }
    }

    // Add a function to be executed from the WordPress dashboard for testing purposes
    add_action('admin_menu', 'test_send_invoice_to_optimum_menu');

    function test_send_invoice_to_optimum_menu() {
        add_menu_page('Test Send Invoice to Optimum', 'Test Send Invoice to Optimum', 'manage_options', 'test-send-invoice-to-optimum', 'test_send_invoice_to_optimum');
    }

    function test_send_invoice_to_optimum() {
        echo '<div class="wrap">';
        echo '<h1>Test Send Invoice to Optimum</h1>';
        echo '<form method="post" action="">';
        wp_nonce_field('send_invoice_nonce_action', 'send_invoice_nonce');
        echo '<p><input type="submit" value="Send All Completed Invoices" class="button button-primary" /></p>';
        echo '</form>';

        if (isset($_POST['send_invoice_nonce']) && check_admin_referer('send_invoice_nonce_action', 'send_invoice_nonce')) {
            send_completed_orders_to_optimum();
            echo '<div class="updated"><p>Visos uÅ¾baigtos sÄ…skaitos iÅ¡siÅ³stos Ä¯ Optimum.</p></div>';
        }

        echo '</div>';
    }
}
?>
